<?php

namespace Proxies\__CG__\EmotionBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Users extends \EmotionBundle\Entity\Users implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'id', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'nom', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'prenom', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'birthday', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'adresse', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'phone', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'nb_permis', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'email', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'password', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'pts_fidelite', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'validationToken', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'vaidate', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'permissions', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'created_at', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'updated_at'];
        }

        return ['__isInitialized__', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'id', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'nom', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'prenom', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'birthday', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'adresse', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'phone', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'nb_permis', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'email', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'password', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'pts_fidelite', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'validationToken', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'vaidate', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'permissions', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'created_at', '' . "\0" . 'EmotionBundle\\Entity\\Users' . "\0" . 'updated_at'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Users $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getNom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNom', []);

        return parent::getNom();
    }

    /**
     * {@inheritDoc}
     */
    public function setNom($nom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNom', [$nom]);

        return parent::setNom($nom);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrenom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrenom', []);

        return parent::getPrenom();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrenom($prenom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrenom', [$prenom]);

        return parent::setPrenom($prenom);
    }

    /**
     * {@inheritDoc}
     */
    public function getBirthday()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBirthday', []);

        return parent::getBirthday();
    }

    /**
     * {@inheritDoc}
     */
    public function setBirthday($birthday)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBirthday', [$birthday]);

        return parent::setBirthday($birthday);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdresse()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdresse', []);

        return parent::getAdresse();
    }

    /**
     * {@inheritDoc}
     */
    public function setAdresse($adresse)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAdresse', [$adresse]);

        return parent::setAdresse($adresse);
    }

    /**
     * {@inheritDoc}
     */
    public function getPhone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhone', []);

        return parent::getPhone();
    }

    /**
     * {@inheritDoc}
     */
    public function setPhone($phone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhone', [$phone]);

        return parent::setPhone($phone);
    }

    /**
     * {@inheritDoc}
     */
    public function getNbPermis()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNbPermis', []);

        return parent::getNbPermis();
    }

    /**
     * {@inheritDoc}
     */
    public function setNbPermis($nb_permis)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNbPermis', [$nb_permis]);

        return parent::setNbPermis($nb_permis);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getPtsFidelite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPtsFidelite', []);

        return parent::getPtsFidelite();
    }

    /**
     * {@inheritDoc}
     */
    public function setPtsFidelite($pts_fidelite)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPtsFidelite', [$pts_fidelite]);

        return parent::setPtsFidelite($pts_fidelite);
    }

    /**
     * {@inheritDoc}
     */
    public function getValidationToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValidationToken', []);

        return parent::getValidationToken();
    }

    /**
     * {@inheritDoc}
     */
    public function setValidationToken($validationToken)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValidationToken', [$validationToken]);

        return parent::setValidationToken($validationToken);
    }

    /**
     * {@inheritDoc}
     */
    public function getVaidate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVaidate', []);

        return parent::getVaidate();
    }

    /**
     * {@inheritDoc}
     */
    public function setVaidate($vaidate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVaidate', [$vaidate]);

        return parent::setVaidate($vaidate);
    }

    /**
     * {@inheritDoc}
     */
    public function getPermissions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPermissions', []);

        return parent::getPermissions();
    }

    /**
     * {@inheritDoc}
     */
    public function setPermissions($permissions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPermissions', [$permissions]);

        return parent::setPermissions($permissions);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($created_at)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$created_at]);

        return parent::setCreatedAt($created_at);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updated_at)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updated_at]);

        return parent::setUpdatedAt($updated_at);
    }

}
